name: Tests

on: [push]

jobs:
  TensorFlow1:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu14

    steps:
      - uses: actions/checkout@v1
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\nno\n' #yes,no for tf1
        shell: bash
      - name: Run CC Unit Tests
        run: bazel test larq_compute_engine:cc_tests
      - name: Build Bazel Package Creator Binary
        run: bazel build :build_pip_pkg
      - name: Build PIP Package
        run: bazel-bin/build_pip_pkg artifacts
      - name: Install PIP Package
        run: pip3 install artifacts/*.whl
      - name: Run Python Tests
        run: bazel test larq_compute_engine:py_tests --python_top=//larq_compute_engine:pyruntime --test_output=errors

  TensorFlow2:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\nyes\n' #yes,yes for tf2
        shell: bash
      - name: Run CC Unit Tests
        run: bazel test larq_compute_engine:cc_tests
      - name: Build Bazel Package Creator Binary
        run: bazel build :build_pip_pkg
      - name: Build PIP Package
        run: bazel-bin/build_pip_pkg artifacts
      - name: Install PIP Package
        run: pip3 install artifacts/*.whl
      - name: Run Python Tests
        run: bazel test larq_compute_engine:py_tests --python_top=//larq_compute_engine:pyruntime --test_output=errors

  TFLite:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: "TFLite: Download dependencies and build"
        run: larq_compute_engine/tflite/build/build_lqce.sh --fullbuild
      - name: "TFLite: Install Python wrapper"
        run: pip3 install /tmp/tflite_pip/python3/dist/*.whl
      - name: "TFLite test dependency: Configure Bazel"
        run: ./configure.sh <<< $'yes\nyes\n' #yes,yes for tf2
        shell: bash
      - name: "TFLite test dependency: Build Bazel Package Creator Binary"
        run: bazel build :build_pip_pkg
      - name: "TFLite test dependency: Build PIP Package"
        run: bazel-bin/build_pip_pkg artifacts
      - name: "TFLite test dependency: Install PIP Package"
        run: pip3 install larq pytest pytest-xdist artifacts/*.whl
      - name: "TFLite: Run Python Tests"
        run: |
          # Go to a different directory to force it to use the installed package
          # and not use the local larq_compute_engine directory
          cd larq_compute_engine/tflite
          python3 -m pytest . -n auto
