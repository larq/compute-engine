name: Tests

on: [push]

jobs:
  TensorFlow1:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu14

    steps:
      - uses: actions/checkout@v1
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\nno\n' #yes,no for tf1
        shell: bash
      - name: Run CC Unit Tests
        run: ./bazel test larq_compute_engine/cc/tests:cc_tests_general
      - name: Build Bazel Package Creator Binary
        run: ./bazel build :build_pip_pkg
      - name: Build PIP Package
        run: bazel-bin/build_pip_pkg artifacts
      - name: Install PIP Package
        run: pip3 install pytest artifacts/*.whl
      - name: Run Python Tests
        run: ./bazel test larq_compute_engine:py_tests --python_top=//larq_compute_engine:pyruntime --test_output=errors

  TensorFlow2:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\nyes\n' #yes,yes for tf2
        shell: bash
      - name: Run CC Unit Tests
        run: ./bazel test larq_compute_engine/cc/tests:cc_tests_general
      - name: Build Bazel Package Creator Binary
        run: ./bazel build :build_pip_pkg
      - name: Build PIP Package
        run: bazel-bin/build_pip_pkg artifacts
      - name: Install PIP Package
        run: pip3 install pytest artifacts/*.whl
      - name: Run Python Tests
        run: ./bazel test larq_compute_engine:py_tests --python_top=//larq_compute_engine:pyruntime --test_output=errors

  TFLite:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: "Setup: Configure Bazel"
        run: ./configure.sh <<< $'yes\nyes\n' #yes,yes for tf2
        shell: bash
        # CC unit tests needs to run after the configure is finished
        # since the CC builds rely on compiler options generated by configure.
      - name: "Run CC Unit Tests"
        run: ./bazel test larq_compute_engine/tflite/tests:cc_tests
      - name: "Build TF Lite Static Library and Python Runtime Package"
        run: larq_compute_engine/tflite/build_make/build_lqce.sh --native --pip
      - name: "Install TF Lite Python Runtime Package"
        run: pip3 install /tmp/tflite_pip/python3/dist/*.whl
      - name: "Python Test Dependency: Build Bazel Package Creator Binary"
        run: ./bazel build :build_pip_pkg
      - name: "Python Test Dependency: Build LCE PIP Package"
        run: bazel-bin/build_pip_pkg artifacts
      - name: "Python Test Dependency: Install LCE PIP Package"
        run: pip3 install larq pytest pytest-xdist artifacts/*.whl
      - name: "Run Python Tests"
        run: |
          # Go to a different directory to force it to use the installed package
          # and not use the local larq_compute_engine directory
          cd larq_compute_engine/tflite
          python3 -m pytest . -n auto

  ARM:
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
      - name: Install qemu-user
        run: apt-get update && apt-get install -y qemu-user
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\nyes\n' #yes,yes for tf2
        shell: bash
      - name: "TF Arm32: Cross-compile and run unit tests in qemu"
        run: ./bazel run larq_compute_engine/cc/tests:cc_tests_arm32_qemu --config=rpi3
      - name: "TF Lite Arm32: Cross-compile and run tflite tests in qemu"
        run: ./bazel run larq_compute_engine/tflite/tests:cc_tests_arm32_qemu --config=rpi3
      - name: "TF Aarch64: Cross-compile and run unit tests in qemu"
        run: ./bazel run larq_compute_engine/cc/tests:cc_tests_aarch64_qemu --config=aarch64
      - name: "TF Lite Aarch64: Cross-compile and run tflite tests in qemu"
        run: ./bazel run larq_compute_engine/tflite/tests:cc_tests_aarch64_qemu --config=aarch64
