name: Tests

on:
  push:
    branches:
      - master
  pull_request: {}

jobs:
  TFLite:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\n' #yes for manylinux2010
        shell: bash
        # CC unit tests needs to run after the configure is finished
        # since the CC builds rely on compiler options generated by configure.
      - name: Run TFLite Ops and Core CC Unit Tests
        run: ./bazelisk test larq_compute_engine/tests:cc_tests --distinct_host_configuration=false --test_output=all
      - name: Build TF Lite Static Library with Make
        run: larq_compute_engine/tflite/build_make/build_lce.sh --native

  ARM:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - name: Install qemu-user
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends qemu-user
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - name: Configure Bazel
        run: ./configure.sh <<< $'n\n'
        shell: bash
      - name: "TF Lite Arm32: Cross-compile and run unit tests in qemu"
        run: ./bazelisk test larq_compute_engine/tests:cc_tests_arm32_qemu --config=rpi3 --test_output=all
        env:
            GTEST_FILTER: -*BigTest*
      - name: "TF Lite Aarch64: Cross-compile and run unit tests in qemu"
        run: ./bazelisk test larq_compute_engine/tests:cc_tests_aarch64_qemu --config=aarch64 --test_output=all
        env:
            GTEST_FILTER: -*BigTest*
      - name: "Benchmark utility: check it builds successfully"
        run: ./bazelisk build //larq_compute_engine/tflite/benchmark:lce_benchmark_model --config=aarch64 --compilation_mode=fastbuild
      - name: "ImageNet evaluation utility: check it builds successfully"
        run: ./bazelisk build //larq_compute_engine/tflite/tools/accuracy/ilsvrc:imagenet_accuracy_eval --config=aarch64 --compilation_mode=fastbuild

  MLIR:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.2
        with:
          service_account_key: ${{ secrets.gcs_bazel_cache }}
          export_default_credentials: true
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Configure Bazel
        run: ./configure.sh <<< $'n\n'
        shell: bash
      - name: Install pip dependencies
        run: pip install tensorflow==2.1.0 larq~=0.9.1 larq_zoo==1.0.b3 pytest tensorflow_datasets==1.3.2 --no-cache-dir
      - name: Run FileCheck tests
        run: ./bazelisk test larq_compute_engine/mlir/tests:all --test_output=all --distinct_host_configuration=false $([ -z "$GOOGLE_APPLICATION_CREDENTIALS" ] || echo "--remote_http_cache=https://storage.googleapis.com/plumerai-bazel-cache/lce-ubuntu --google_default_credentials")
      - name: Run End2End tests
        run: ./bazelisk test larq_compute_engine/tests:end2end_test --test_output=all --distinct_host_configuration=false $([ -z "$GOOGLE_APPLICATION_CREDENTIALS" ] || echo "--remote_http_cache=https://storage.googleapis.com/plumerai-bazel-cache/lce-ubuntu --google_default_credentials")

  ConverterPython:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tf-version: [1.14.0, 1.15.2, 2.0.1, 2.1.0]
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install dependencies
        run: pip install tensorflow==${{matrix.tf-version}} larq~=0.9.1 larq_zoo==1.0.b3 tensorflow_datasets==1.3.2 packaging --no-cache
      - name: Run Converter test
        run: PYTHONPATH=./ python larq_compute_engine/mlir/python/converter_test.py

  Android_AAR:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"

    steps:
      - uses: actions/checkout@v1
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - uses: actions/cache@v1
        id: cache
        with:
          path: /tmp/lce_android
          key: ${{ runner.os }}-${{ hashFiles('**/third_party/install_android.sh') }}
      - name: Configure Bazel
        run: ./configure.sh <<< $'n\n'
        shell: bash
      - name: Download and install Android NDK/SDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./third_party/install_android.sh
      - name: Build LCE AAR
        run: BUILDER=./bazelisk ./larq_compute_engine/tflite/java/build_lce_aar.sh
