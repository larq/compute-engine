name: Tests

on:
  push:
    branches:
      - master
  pull_request: {}

jobs:
  TFLite:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - name: "Setup: Configure Bazel"
        run: ./configure.sh <<< $'yes\n' #yes for manylinux2010
        shell: bash
        # CC unit tests needs to run after the configure is finished
        # since the CC builds rely on compiler options generated by configure.
      - name: "Run Core Components CC Unit Tests"
        run: ./bazelisk test larq_compute_engine/core/tests:cc_tests --distinct_host_configuration=false
      - name: "Run TFLite Ops CC Unit Tests"
        run: ./bazelisk test larq_compute_engine/tflite/tests:cc_tests --distinct_host_configuration=false
      - name: "Build TF Lite Static Library with Make"
        run: larq_compute_engine/tflite/build_make/build_lce.sh --native

  ARM:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - name: Install qemu-user
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - name: Configure Bazel
        run: ./configure.sh <<< $'yes\n' #yes for manylinux2010
        shell: bash
      - name: "TF Arm32: Cross-compile and run unit tests in qemu"
        run: ./bazelisk run larq_compute_engine/core/tests:cc_tests_arm32_qemu --config=rpi3 --compilation_mode dbg
      - name: "TF Lite Arm32: Cross-compile and run tflite tests in qemu"
        run: ./bazelisk run larq_compute_engine/tflite/tests:cc_tests_arm32_qemu --config=rpi3 --compilation_mode dbg
      - name: "TF Aarch64: Cross-compile and run unit tests in qemu"
        run: ./bazelisk run larq_compute_engine/core/tests:cc_tests_aarch64_qemu --config=aarch64 --compilation_mode dbg
      - name: "TF Lite Aarch64: Cross-compile and run tflite tests in qemu"
        run: ./bazelisk run larq_compute_engine/tflite/tests:cc_tests_aarch64_qemu --config=aarch64 --compilation_mode dbg

  MLIR:
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-darwin-amd64 > bazelisk
          chmod +x bazelisk
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Configure Bazel
        run: ./configure.sh
      - name: Install pip dependencies
        run: pip install numpy six --no-cache-dir
      - name: Run FileCheck tests
        run: ./bazelisk test larq_compute_engine/mlir/tests:all --test_output=all --distinct_host_configuration=false

  EndToEnd:
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-darwin-amd64 > bazelisk
          chmod +x bazelisk
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Configure Bazel
        run: ./configure.sh
      - name: Install pip dependencies
        run: pip install tensorflow-cpu==2.1.0 larq_zoo==0.5.0 pytest tensorflow_datasets==1.3.2 --no-cache
      - name: Run End2End tests
        run: ./bazelisk run larq_compute_engine/tests:end2end_test --distinct_host_configuration=false

  MLIR_Python:
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    steps:
      - uses: actions/checkout@v2
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-darwin-amd64 > bazelisk
          chmod +x bazelisk
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Configure Bazel
        run: ./configure.sh
      - name: Install pip dependencies
        run: pip install tensorflow==2.1.0 larq_zoo==0.5.0 pytest tensorflow_datasets==1.3.2 --no-cache
      - name: Run converter tests TF 2.1
        run: ./bazelisk run larq_compute_engine/mlir:converter_test --distinct_host_configuration=false
      - name: Install TF 2.0
        run: pip install tensorflow==2.0.0 --no-cache
      - name: Run converter tests TF 2.0
        run: ./bazelisk run larq_compute_engine/mlir:converter_test --distinct_host_configuration=false
      - name: Install TF 1.15
        run: pip install tensorflow==1.15 --no-cache
      - name: Run converter tests TF 1.15
        run: ./bazelisk run larq_compute_engine/mlir:converter_test --distinct_host_configuration=false
      - name: Install TF 1.14
        run: pip install tensorflow==1.14 --no-cache
      - name: Run converter tests TF 1.14
        run: ./bazelisk run larq_compute_engine/mlir:converter_test --distinct_host_configuration=false

  Android_AAR:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    container:
      image: tensorflow/tensorflow:custom-op-ubuntu16

    steps:
      - uses: actions/checkout@v1
      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.3.0/bazelisk-linux-amd64 > bazelisk
          chmod +x bazelisk
      - name: "Setup: Configure Bazel"
        run: ./configure.sh <<< $'yes\n' #yes for manylinux2010
        shell: bash
      - name: "Download and install Android NDK/SDK"
        run: ./third_party/install_android.sh
      - name: "Build LCE AAR"
        run: BUILDER=./bazelisk ./larq_compute_engine/tflite/java/build_lce_aar.sh
