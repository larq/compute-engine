name: lce-release

on:
  release:
    types: [published]
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the form 1.0.0(.devYYYYMMDD)'
        required: true

env:
  IMAGE_NAME: dev

jobs:
  benchmark-binaries:
    name: Build Benchmark Binaries for AArch64 and Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/lce_android
          key: ${{ runner.os }}-${{ hashFiles('**/third_party/install_android.sh') }}
      - name: Configure Bazel
        run: ./configure.py
        shell: bash
      - name: Install pip dependencies
        run: pip install numpy six --no-cache-dir
      - name: Download and install Android NDK/SDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./third_party/install_android.sh
      - run: mkdir benchmark-binaries
      - name: Build Benchmark utility for AArch64
        run: |
          bazelisk build //larq_compute_engine/tflite/benchmark:lce_benchmark_model --config=aarch64 -c opt --copt=-O3 --features=fully_static_link
          cp bazel-bin/larq_compute_engine/tflite/benchmark/lce_benchmark_model benchmark-binaries/lce_benchmark_model_aarch64
      - name: Build Benchmark utility for AArch32
        run: |
          bazelisk build //larq_compute_engine/tflite/benchmark:lce_benchmark_model --config=rpi3 -c opt --copt=-O3 --features=fully_static_link
          cp bazel-bin/larq_compute_engine/tflite/benchmark/lce_benchmark_model benchmark-binaries/lce_benchmark_model_aarch32
      - name: Build Benchmark utility for Android
        run: |
          bazelisk build //larq_compute_engine/tflite/benchmark:lce_benchmark_model --config=android_arm64 -c opt --copt=-O3
          cp bazel-bin/larq_compute_engine/tflite/benchmark/lce_benchmark_model benchmark-binaries/lce_benchmark_model_android_arm64
      - uses: actions/upload-artifact@v2
        with:
          name: Benchmark-Binaries
          path: benchmark-binaries
      - name: Upload Release Asset AArch64
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: benchmark-binaries/lce_benchmark_model_aarch64
          asset_name: lce_benchmark_model_aarch64
          asset_content_type: application/octet-stream
      - name: Upload Release Asset AArch32
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: benchmark-binaries/lce_benchmark_model_aarch32
          asset_name: lce_benchmark_model_aarch32
          asset_content_type: application/octet-stream
      - name: Upload Release Asset Android
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: benchmark-binaries/lce_benchmark_model_android_arm64
          asset_name: lce_benchmark_model_android_arm64
          asset_content_type: application/octet-stream

  android-aar:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/lce_android
          key: ${{ runner.os }}-${{ hashFiles('**/third_party/install_android.sh') }}
      - name: Configure Bazel
        run: ./configure.py
        shell: bash
      - name: Install pip dependencies
        run: pip install numpy six --no-cache-dir
      - name: Download and install Android NDK/SDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./third_party/install_android.sh
      - name: Build LCE AAR
        run: BUILDER=bazelisk ./larq_compute_engine/tflite/java/build_lce_aar.sh
      - uses: actions/upload-artifact@v2
        with:
          name: Android-AAR
          path: lce-lite-*.aar
      - name: Get Name of Artifact
        if: github.event_name == 'release'
        run: |
          ASSET_NAME=$(ls lce-lite-*.aar | head -n 1)
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV
      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  macos-release-wheel:
    name: Build release wheels for macOS
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build macOS wheels
        run: |
          python --version
          python -m pip install delocate wheel setuptools numpy six --no-cache-dir

          ./configure.py

          bazelisk build :build_pip_pkg --copt=-fvisibility=hidden --copt=-mavx --copt=-mmacosx-version-min=10.13 --linkopt=-mmacosx-version-min=10.13 --linkopt=-dead_strip --distinct_host_configuration=false
          bazel-bin/build_pip_pkg artifacts --plat-name macosx_10_13_x86_64

          for f in artifacts/*.whl; do
            delocate-wheel -w wheelhouse $f
          done
        env:
          LCE_RELEASE_VERSION: ${{ github.event.inputs.version }}
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-wheels
          path: wheelhouse

  manylinux-release-wheel:
    name: Build release wheels for manylinux2010
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build manylinux2010 wheels
        run: |
          docker run -e PYTHON_VERSION=${{ matrix.python-version }} \
            -e LCE_RELEASE_VERSION=${{ github.event.inputs.version }} \
            -v ${PWD}:/compute-engine -w /compute-engine \
            tensorflow/tensorflow:2.2.0-custom-op-ubuntu16 \
            .github/tools/release_linux.sh

          sudo apt-get -y -qq install patchelf --no-install-recommends
          python -m pip install auditwheel --no-cache-dir

          for f in artifacts/*.whl; do
            auditwheel repair --plat manylinux2010_x86_64 $f
          done

          ls -al wheelhouse/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-wheels
          path: wheelhouse

  windows-release-wheel:
    name: Build release wheels for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Configure Pagefile
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
          minimum-size: 4GB
      - name: Pagefile size
        run: |
          (Get-CimInstance Win32_PageFileUsage).AllocatedBaseSize
        shell: pwsh
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build Windows wheels
        run: |
          $Env:BAZEL_VC = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC"
          set PreferredToolArchitecture=x64

          python --version
          python -m pip install wheel setuptools numpy six --no-cache-dir

          "" | python configure.py

          bazelisk --output_base=C:\build_output build :build_pip_pkg --enable_runfiles --discard_analysis_cache --notrack_incremental_state --nokeep_state_after_build --nouse_action_cache --local_ram_resources=4096
          bazel-bin/build_pip_pkg wheelhouse
        env:
          LCE_RELEASE_VERSION: ${{ github.event.inputs.version }}
        shell: pwsh
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-wheels
          path: wheelhouse

  upload-wheels:
    name: Publish wheels to PyPi
    if: github.event_name == 'release'
    needs: [manylinux-release-wheel, macos-release-wheel, windows-release-wheel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Linux-wheels
          path: Linux-wheels
      - uses: actions/download-artifact@v2
        with:
          name: macOS-wheels
          path: macOS-wheels
      - uses: actions/download-artifact@v2
        with:
          name: Windows-wheels
          path: Windows-wheels
      - run: |
          set -e -x
          mkdir -p dist
          cp Linux-wheels/*.whl dist/
          cp macOS-wheels/*.whl dist/
          cp Windows-wheels/*.whl dist/
          ls -la dist/
          sha256sum dist/*.whl
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}

  push-docker-image:
    name: Push Docker image to GitHub Package Registry
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
