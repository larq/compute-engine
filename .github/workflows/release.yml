name: lce-release

on:
  release:
    types: [published]
    tags:
      - v*
  push:
    branches:
      - "releases/nightly"

jobs:
  macos-release-wheel:
    name: Build release wheels for macOS
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build macOS wheels
        run: |
          python --version
          python -m pip install delocate wheel setuptools numpy six --no-cache-dir

          ./configure.sh

          bazelisk build :build_pip_pkg --copt=-fvisibility=hidden --copt=-mavx --copt=-mmacosx-version-min=10.13 --linkopt=-mmacosx-version-min=10.13 --distinct_host_configuration=false
          bazel-bin/build_pip_pkg artifacts --plat-name macosx_10_13_x86_64

          for f in artifacts/*.whl; do
            delocate-wheel -w wheelhouse $f
          done
        shell: bash
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}-wheels
          path: wheelhouse

  manylinux-release-wheel:
    name: Build release wheels for manylinux2010
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build manylinux2010 wheels
        run: |
          docker run -e PYTHON_VERSION=${{ matrix.python-version }} -v ${PWD}:/compute-engine -w /compute-engine \
            tensorflow/tensorflow:custom-op-ubuntu16 \
            .github/tools/release_linux.sh

          sudo apt-get -y -qq install patchelf --no-install-recommends
          python -m pip install auditwheel --no-cache-dir

          for f in artifacts/*.whl; do
            auditwheel repair --plat manylinux2010_x86_64 $f
          done

          ls -al wheelhouse/
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}-wheels
          path: wheelhouse

  windows-release-wheel:
    name: Build release wheels for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build Windows wheels
        run: |
          export PYTHON_BIN_PATH=$(which python)
          export BAZEL_VC="C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/"

          python --version
          python -m pip install wheel setuptools numpy six --no-cache-dir

          ./configure.sh

          bazelisk --output_base=cache build :build_pip_pkg --copt=/arch:AVX --enable_runfiles --define=override_eigen_strong_inline=true
          bazel-bin/build_pip_pkg wheelhouse

        shell: bash
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}-wheels
          path: wheelhouse

  upload-wheels:
    name: Publish wheels to PyPi
    if: github.event_name != 'push'
    needs: [manylinux-release-wheel, macos-release-wheel, windows-release-wheel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Linux-wheels
          path: Linux-wheels
      - uses: actions/download-artifact@v1
        with:
          name: macOS-wheels
          path: macOS-wheels
      - uses: actions/download-artifact@v1
        with:
          name: Windows-wheels
          path: Windows-wheels
      - run: |
          set -e -x
          mkdir -p dist
          cp Linux-wheels/*.whl dist/
          cp macOS-wheels/*.whl dist/
          cp Windows-wheels/*.whl dist/
          ls -la dist/
          sha256sum dist/*.whl
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
