trigger:
  - master

pr:
  - master

jobs:
  - job: "Test_TF_1"
    pool:
      vmImage: "ubuntu-latest"
    container: tensorflow/tensorflow:custom-op-ubuntu14
    steps:
      - script: ./configure.sh <<< $'yes\nno\n' #yes,no for tf1
        displayName: "Configure Bazel"

      - script: bazel test larq_compute_engine:cc_tests
        displayName: "Run CC Unit Tests"

      - script: bazel build :build_pip_pkg
        displayName: "Build Bazel Package Creator Binary"

      - script: bazel-bin/build_pip_pkg artifacts
        displayName: "Build PIP Package"

      - script: pip3 install artifacts/*.whl --user
        displayName: "Install PIP Package"

      - script: bazel test larq_compute_engine:py_tests --python_top=//larq_compute_engine:pyruntime --test_output=errors
        displayName: "Run Python Tests"

  - job: "Test_TF_2"
    pool:
      vmImage: "ubuntu-latest"
    container: tensorflow/tensorflow:custom-op-ubuntu16
    steps:
      - checkout: self
        submodules: true

      - script: ./configure.sh <<< $'yes\nyes\n' #yes,yes for tf2
        displayName: "Configure Bazel"

      - script: bazel test larq_compute_engine:cc_tests
        displayName: "Run CC Unit Tests"

      - script: bazel build :build_pip_pkg
        displayName: "Build Bazel Package Creator Binary"

      - script: bazel-bin/build_pip_pkg artifacts
        displayName: "Build PIP Package"

      - script: pip3 install artifacts/*.whl --user
        displayName: "Install PIP Package"

      - script: bazel test larq_compute_engine:py_tests --python_top=//larq_compute_engine:pyruntime --test_output=errors
        displayName: "Run Python Tests"

      - script: |
          ext/tensorflow/tensorflow/lite/tools/make/download_dependencies.sh
        displayName: "TFLite: Download dependencies"

      - script: |
          ext/tensorflow/tensorflow/lite/tools/make/build_lib.sh
          larq_compute_engine/tflite/build/build_lqce.sh
        displayName: "TFLite: Build C++ library"

      - script: |
          sudo apt install swig -y
          pip3 install numpy setuptools wheel --user
          ext/tensorflow/tensorflow/lite/tools/pip_package/build_pip_package.sh
          pip3 install /tmp/tflite_pip/python3/dist/*.whl --user
        displayName: "TFLite: Build and install Python wrapper"

      - script: |
          export PATH="$PATH:$HOME/.local/bin"
          pip3 install pytest --user
          # Go to a different directory to force it to use the installed package
          # and not use the local larq_compute_engine directory
          cd larq_compute_engine/tflite
          python3 -m pytest .
        displayName: "TFLite: Run Python Tests"


  - job: "Lint"
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.7"
          architecture: "x64"

      - script: pip install pyflakes==2.1.1 black==19.3b0
        displayName: "Install linting dependencies"

      - script: pyflakes larq_compute_engine
        displayName: "pyflakes"

      - script: black larq_compute_engine --check --target-version py36
        displayName: "Black code style"
